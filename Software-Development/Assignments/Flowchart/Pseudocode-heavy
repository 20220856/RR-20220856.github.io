Detailed Pseudocode for Knight's Tour problem

---

import os
import pygame

create window, set dimensions, and set window name using Pygame

create function "create_board":
  set first white square generation position
  set first black square generation position
  
  set loop-counter to 0
  
  set square-width and height (100)
  set board-width (in squares)
  set board-height (in squares)
  
  set squares-across counter to 0 (new board)
  set squares-down counter to 0 (new board)
  create an empty dictionary that records square coordinates and the order in which they were drawn
  
  for i in range (board height):                                                    ### defined by user above - repeat until "board-height" is reached
  
    while the squares-across counter is less than half of the board width:          ### this is so that HALF of the width is take up by either black or white
      draw a white square at first white square generation position * 2             ### to ensure that squares are spread across screen correctly
      draw a black square at first black square generation position * 2             ### specifically positioned as to be in between white squares
      
      add the square coordinates and draw order to the square dictionary
      
      add 1 to squares-across                                                       ### showing that one square has been drawn
      
      add the width of a chess square + two pixels to the white starting position   ### to prepare the spacing for the next square generation
      add the width of a chess square + two pixels to the black starting position
    
    increase the squares-down counter by the height of a chess square + two pixels  ### marking the end of the first row
    set squares across to 0                                                         ### to facilitate the drawing of a new row
    if loop-counter is an even number:
      the white square is drawn first
    else:
      the black square is drawn first

### This is the end of the function "create_board". All in all, it draws a chessboard on the window, with size according to user specifications. It is always square or rectangular.

at this point, coordinates and draw order of generated squares should be available in the squares dictionary

invisible buttons are drawn atop the chess squares that - when clicked within the area - inserts and locks the knight sprite to that square




the sprite for the knight piece is imported using pygame, and sized correctly for the scale of the board.
